/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/reviews": {
    get: operations["getReview"];
    put: operations["createOrUpdateReview"];
  };
  "/businesses/details": {
    put: operations["updateBusinessDetails"];
  };
  "/checkIns": {
    get: operations["getCheckInExists"];
    post: operations["createCheckIn"];
  };
  "/businesses/{businessId}/reviews": {
    post: operations["getReviews"];
  };
  "/businesses/search": {
    post: operations["searchBusinessesFuzzy"];
  };
  "/auth/users/signup": {
    post: operations["createUser"];
  };
  "/auth/signin": {
    post: operations["signIn"];
  };
  "/auth/businesses/signup": {
    post: operations["createBusiness"];
  };
  "/users/{userId}/reviews": {
    get: operations["getReviews_1"];
  };
  "/users/{userId}/checkIns": {
    get: operations["getVisited"];
  };
  "/reviews/{reviewId}": {
    get: operations["getReview_1"];
    delete: operations["deleteReview"];
  };
  "/categories": {
    get: operations["getCategories"];
  };
  "/businesses/{businessId}": {
    get: operations["getBusinessById"];
  };
  "/businesses/search/autocomplete": {
    get: operations["autocomplete"];
  };
  "/businesses/reindex": {
    get: operations["reindex"];
  };
  "/attributes": {
    get: operations["getAttributes"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CreateReviewRequest: {
      businessId?: string;
      /** Format: int32 */
      score?: number;
      description?: string;
    };
    PostOwner: {
      firebaseUid?: string;
      email?: string;
      fullName?: string;
    };
    ReviewReply: {
      /** Format: int64 */
      id?: number;
      description?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    ReviewResponse: {
      /** Format: int64 */
      id?: number;
      postOwner?: components["schemas"]["PostOwner"];
      businessId?: string;
      businessName?: string;
      /** Format: int32 */
      score?: number;
      description?: string;
      reply?: components["schemas"]["ReviewReply"];
    };
    Attribute: {
      /** Format: int64 */
      id?: number;
      name?: string;
    };
    Category: {
      /** Format: int64 */
      id?: number;
      name?: string;
    };
    UpdateBusinessDetailsRequest: {
      type?: string;
      description?: string;
      phoneNumber?: string;
      categories?: components["schemas"]["Category"][];
      /** @enum {string} */
      cost?: "INEXPENSIVE" | "MODERATE" | "EXPENSIVE" | "VERY_EXPENSIVE";
      attributes?: components["schemas"]["Attribute"][];
    };
    CheckInRequest: {
      businessId?: string;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      longitude?: number;
    };
    CheckInResponse: {
      note?: string;
      userId?: string;
      businessId?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    PaginatedRequest: {
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      pageNumber?: number;
      orderBy?: string;
      /** @enum {string} */
      sortOrder?: "ASC" | "DESC";
    };
    PaginatedResponseReviewResponse: {
      /**
       * Format: int32
       * @description Rozmiar strony
       * @example 100
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description Numer strony
       * @example 0
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Liczba elementów na stronie
       * @example 5
       */
      numberOfElements?: number;
      /**
       * Format: int64
       * @description Liczba wszystkich elementów
       * @example 5
       */
      totalNumberOfElements?: number;
      /**
       * Format: int32
       * @description Liczba stron
       * @example 5
       */
      totalPages?: number;
      /** @description Lista elementów */
      results?: components["schemas"]["ReviewResponse"][];
    };
    SearchFilters: {
      /** @enum {string} */
      cost?: "INEXPENSIVE" | "MODERATE" | "EXPENSIVE" | "VERY_EXPENSIVE";
      /** Format: double */
      longitude?: number;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      distance?: number;
    };
    SearchRequest: {
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      pageNumber?: number;
      orderBy?: string;
      /** @enum {string} */
      sortOrder?: "ASC" | "DESC";
      filters?: components["schemas"]["SearchFilters"];
    };
    /** @description Lista elementów */
    BusinessResponse: {
      firebaseUid?: string;
      name?: string;
      email?: string;
      phoneNumber?: string;
      profilePictureUrl?: string;
      description?: string;
      type?: string;
      categories?: components["schemas"]["Category"][];
      /** @enum {string} */
      cost?: "INEXPENSIVE" | "MODERATE" | "EXPENSIVE" | "VERY_EXPENSIVE";
      /** Format: double */
      score?: number;
      location?: components["schemas"]["Location"];
      /** Format: date */
      joinDate?: string;
      /** @enum {string} */
      role?: "USER" | "BUSINESS";
    };
    Location: {
      country?: string;
      address?: string;
      zipCode?: string;
      city?: string;
      district?: string;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      longitude?: number;
    };
    PaginatedResponseBusinessResponse: {
      /**
       * Format: int32
       * @description Rozmiar strony
       * @example 100
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description Numer strony
       * @example 0
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Liczba elementów na stronie
       * @example 5
       */
      numberOfElements?: number;
      /**
       * Format: int64
       * @description Liczba wszystkich elementów
       * @example 5
       */
      totalNumberOfElements?: number;
      /**
       * Format: int32
       * @description Liczba stron
       * @example 5
       */
      totalPages?: number;
      /** @description Lista elementów */
      results?: components["schemas"]["BusinessResponse"][];
    };
    UserRequest: {
      email?: string;
      username?: string;
      fullName?: string;
    };
    AuthResponse: {
      email?: string;
      firebaseUid?: string;
      /** @enum {string} */
      role?: "USER" | "BUSINESS";
    };
    BusinessRequest: {
      email?: string;
      name?: string;
      phoneNumber?: string;
    };
    Review: {
      /** Format: int64 */
      id?: number;
      /** Format: int32 */
      score?: number;
      description?: string;
      /** Format: date-time */
      createdAt?: string;
      reviewReply?: components["schemas"]["ReviewReply"];
    };
    BusinessDetailsResponse: {
      firebaseUid?: string;
      name?: string;
      email?: string;
      phoneNumber?: string;
      profilePictureUrl?: string;
      description?: string;
      type?: string;
      categories?: components["schemas"]["Category"][];
      /** @enum {string} */
      cost?: "INEXPENSIVE" | "MODERATE" | "EXPENSIVE" | "VERY_EXPENSIVE";
      /** Format: double */
      score?: number;
      location?: components["schemas"]["Location"];
      attributes?: components["schemas"]["Attribute"][];
      /** Format: date */
      joinDate?: string;
      /** @enum {string} */
      role?: "USER" | "BUSINESS";
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  getReview: {
    parameters: {
      query: {
        userId: string;
        businessId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ReviewResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createOrUpdateReview: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateReviewRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ReviewResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateBusinessDetails: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateBusinessDetailsRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getCheckInExists: {
    parameters: {
      query: {
        userId: string;
        businessId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createCheckIn: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CheckInRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CheckInResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getReviews: {
    parameters: {
      path: {
        businessId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaginatedRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PaginatedResponseReviewResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  searchBusinessesFuzzy: {
    parameters: {
      query: {
        searchQuery: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PaginatedResponseBusinessResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createUser: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AuthResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  signIn: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AuthResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createBusiness: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AuthResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getReviews_1: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Review"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getVisited: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CheckInResponse"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getReview_1: {
    parameters: {
      path: {
        reviewId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ReviewResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteReview: {
    parameters: {
      header: {
        Authorization: string;
      };
      path: {
        reviewId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getCategories: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Category"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getBusinessById: {
    parameters: {
      path: {
        businessId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BusinessDetailsResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  autocomplete: {
    parameters: {
      query: {
        searchQuery: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string[];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  reindex: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAttributes: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Attribute"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "*/*": string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
}
