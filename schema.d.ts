/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/businesses/search": {
    post: operations["searchBusinessesFuzzy"];
  };
  "/auth/users/signup": {
    post: operations["createUser"];
  };
  "/auth/signin": {
    post: operations["signIn"];
  };
  "/auth/businesses/signup": {
    post: operations["createBusiness"];
  };
  "/businesses/{businessId}": {
    get: operations["getBusinessById"];
  };
  "/businesses/search/autocomplete": {
    get: operations["autocomplete"];
  };
  "/businesses/reindex": {
    get: operations["reindex"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SearchFilters: {
      /** @enum {string} */
      cost?: "INEXPENSIVE" | "MODERATE" | "EXPENSIVE" | "VERY_EXPENSIVE";
      /** Format: double */
      longitude?: number;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      distance?: number;
    };
    SearchRequest: {
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      pageNumber?: number;
      orderBy?: string;
      /** @enum {string} */
      sortOrder?: "ASC" | "DESC";
      filters?: components["schemas"]["SearchFilters"];
    };
    Business: {
      /** Format: int64 */
      id?: number;
      firebaseUid?: string;
      name?: string;
      profilePictureUrl?: string;
      email?: string;
      phoneNumber?: string;
      address?: string;
      zipCode?: string;
      district?: string;
      city?: string;
      country?: string;
      description?: string;
      type?: string;
      /** @enum {string} */
      cost?: "INEXPENSIVE" | "MODERATE" | "EXPENSIVE" | "VERY_EXPENSIVE";
      /** Format: double */
      score?: number;
      /** Format: double */
      locationLatitude?: number;
      /** Format: double */
      locationLongitude?: number;
      /** Format: date */
      joinDate?: string;
      categories?: components["schemas"]["Category"][];
      reviews?: components["schemas"]["Review"][];
    };
    /** @description Lista elementów */
    BusinessResponse: {
      firebaseUid?: string;
      name?: string;
      email?: string;
      phoneNumber?: string;
      profilePictureUrl?: string;
      description?: string;
      type?: string;
      categories?: components["schemas"]["Category"][];
      /** @enum {string} */
      cost?: "INEXPENSIVE" | "MODERATE" | "EXPENSIVE" | "VERY_EXPENSIVE";
      /** Format: double */
      score?: number;
      location?: components["schemas"]["Location"];
      /** Format: date */
      joinDate?: string;
      /** @enum {string} */
      role?: "USER" | "BUSINESS";
    };
    Category: {
      /** Format: int64 */
      id?: number;
      name?: string;
      businesses?: components["schemas"]["Business"][];
    };
    Location: {
      country?: string;
      address?: string;
      zipCode?: string;
      city?: string;
      district?: string;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      longitude?: number;
    };
    Review: Record<string, never>;
    SearchResponseBusinessResponse: {
      /**
       * Format: int32
       * @description Rozmiar strony
       * @example 100
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description Numer strony
       * @example 0
       */
      pageNumber?: number;
      /** @description Lista elementów */
      results?: components["schemas"]["BusinessResponse"][];
    };
    UserRequest: {
      email?: string;
      username?: string;
      fullName?: string;
    };
    AuthResponse: {
      email?: string;
      firebaseUid?: string;
      /** @enum {string} */
      role?: "USER" | "BUSINESS";
    };
    BusinessRequest: {
      email?: string;
      name?: string;
      phoneNumber?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  searchBusinessesFuzzy: {
    parameters: {
      query: {
        searchQuery: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SearchResponseBusinessResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createUser: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AuthResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  signIn: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AuthResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createBusiness: {
    parameters: {
      header: {
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AuthResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getBusinessById: {
    parameters: {
      path: {
        businessId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BusinessResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  autocomplete: {
    parameters: {
      query: {
        searchQuery: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string[];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  reindex: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
    };
  };
}
